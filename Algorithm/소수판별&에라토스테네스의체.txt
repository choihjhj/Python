# [알고리즘] 소수 판별 알고리즘
* 소수란, 2보다 큰 자연수 중에서 1과 자신을 제외한 자연수로는 나누어 떨어지지 않는 자연수 *

예) 
6은 1,2,3,6 으로 나누어 떨어져서 소수아님
7은 1,7 1과 자신을 제외하고는 나누어 떨어지지 않아서 소수임

** 방법1) 2부터 X-1까지의 모든 수를 나누어 보기, O(X) **
def is_prime_number(x):
    for i in range(2,x):
        if x%i ==0: return False
    return True    
print(is_prime_number(6))
print(is_prime_number(7))

하지만, 이 방법은 O(X)로 비효율적인 코드다.
왜냐하면 X가 1,000,000이라면 반복문을 그만큼 돌아야 하기 시간복잡도가 너무 오래 걸린다.
보통, 6의 약수가 1,2,3,6인데 1*6=6,2*3=6 이므로 1,2 반만 체크해도 약수인지 판단할 수 있다.
즉, 제곱근까지만(가운데약수까지만) 확인하면 된다.
따라서 위의 코드의 range 범위를 아래 코드와 같이 수정한다면

** 방법2) 제곱근까지만 검사, O(X^1/2) **
import math
def is_prime_number(x):
    for i in range(2,int(math.sqrt(x))+1): #for i in range(2,int(x**0.5)+1): 라고 해도 됨
        if x%i ==0: return False
    return True    
print(is_prime_number(6))
print(is_prime_number(7))


하지만 위 문제는 숫자 1개가 소수인지 판단하는 알고리즘이며, 만약 일정범위 안에서 모든 소수를 찾으라고
했을 때는 에라토스테네스의 체 알고리즘을 이용해야 한다.


# [알고리즘] 에라토스테네스의 체 알고리즘

* 에라토스테네스의 체 알고리즘은 여러 개의 수가 소수인지 아닌지를 판별할 때 사용하는 대표적인 알고리즘이다.*
N보다 작거나 같은 모든 소수를 찾을 때 사용할 수 있다.

구현방법)
1. 2부터 N까지의 모든 자연수를 나열한다.
2. 남은 수중에서 아직 처리하지 않은 가장 작은 수 i를 찾는다.
3. 남은 수 중에서 i의 배수를 모두 제거한다.(i는 제거하지 않는다.)
4. 더 이상 반복할 수 없을 때까지 2번과 3번의 과정을 반복한다.

예를들어 n이 26일 때,
1. 2부터 26까지 나열
2,3. 가장 작은 수 2의 배수를 2빼고 다 제거 (2,3,5,7,9,11,13,15,17,19,21,23,25)
2,3. 가장 작은 수 3의 배수를 3빼고 다 제거 (2,3,5,7,11,13,17,19,23,25)
2,3. 가장 작은 수 5의 배수를 5빼고 다 제거 (2,3,5,7,11,13,17,19,23)

이렇게 하면 최종 1부터 26까지 모든 소수 (2,3,5,7,11,13,17,19,23)를 찾을 수 있다.
풀이)
arr=[True for _ in range(n+1)] #0~26 index가 0~26 숫자 의미, 값은 모두 True로 초기화
# arr[1]=False          #만약 문제에서 1은 소수가 아니다 라면 arr[1]=False 추가해주기

for i in range(2,int(x**0.5)+1): #2부터 n의 제곱근까지의 모든 수를 확인하며
    if arr[i] : #i가 소수인 경우(남은 수인 경우)
        #i를 제외한 i의 모든 배수를 지우기
        for j in range(i*2,N+1,i): # 2*i부터 n까지 i의 배수 False로 바꾸기
            arr[j]=False

for i in range(2,n+1): #모든 소수 출력
    if arr[i]: print(i, end=' ')



'''프로그래머스 소수 관련 문제
-소수찾기
문제링크: https://school.programmers.co.kr/learn/courses/30/lessons/12921
'''